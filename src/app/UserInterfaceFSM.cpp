//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : UserInterface.sm
//

 //
//


#include "UserInterface.h"
#include "UserInterfaceFSM.h"

using namespace statemap;

// Static class declarations.
UIMap_Reset UIMap::Reset("UIMap::Reset", 0);
UIMap_UITest UIMap::UITest("UIMap::UITest", 1);
UIMap_AddressDisplay UIMap::AddressDisplay("UIMap::AddressDisplay", 2);
UIMap_DisplayOff UIMap::DisplayOff("UIMap::DisplayOff", 3);
UIMap_MenuMode UIMap::MenuMode("UIMap::MenuMode", 4);
UIMap_MenuSpeed UIMap::MenuSpeed("UIMap::MenuSpeed", 5);
UIMap_MenuDisplay UIMap::MenuDisplay("UIMap::MenuDisplay", 6);
UIMap_MenuExit UIMap::MenuExit("UIMap::MenuExit", 7);
UIMap_MenuModeDmx UIMap::MenuModeDmx("UIMap::MenuModeDmx", 8);
UIMap_MenuModeRainBow UIMap::MenuModeRainBow("UIMap::MenuModeRainBow", 9);
UIMap_MenuModeTest UIMap::MenuModeTest("UIMap::MenuModeTest", 10);
UIMap_MenuSpeedShow UIMap::MenuSpeedShow("UIMap::MenuSpeedShow", 11);
UIMap_MenuSpeedIncrease UIMap::MenuSpeedIncrease("UIMap::MenuSpeedIncrease", 12);
UIMap_MenuDisplayShow UIMap::MenuDisplayShow("UIMap::MenuDisplayShow", 13);
UIMap_MenuDisplayIncrease UIMap::MenuDisplayIncrease("UIMap::MenuDisplayIncrease", 14);

void UserInterfaceState::BtnModePressed(UserInterfaceFSM& context)
{
    Default(context);
}

void UserInterfaceState::BtnOkPressed(UserInterfaceFSM& context)
{
    Default(context);
}

void UserInterfaceState::Ready(UserInterfaceFSM& context)
{
    Default(context);
}

void UserInterfaceState::Tick(UserInterfaceFSM& context)
{
    Default(context);
}

void UserInterfaceState::displaySleepTimerElapsed(UserInterfaceFSM& context)
{
    Default(context);
}

void UserInterfaceState::updateTimerElapsed(UserInterfaceFSM& context)
{
    Default(context);
}

void UserInterfaceState::Default(UserInterfaceFSM& context)
{
    assert(false);

}

void UIMap_Default::Ready(UserInterfaceFSM& context)
{


}

void UIMap_Default::Tick(UserInterfaceFSM& context)
{


}

void UIMap_Default::Default(UserInterfaceFSM& context)
{


}

void UIMap_Reset::Ready(UserInterfaceFSM& context)
{

    context.getState().Exit(context);
    context.setState(UIMap::UITest);
    context.getState().Entry(context);

}

void UIMap_UITest::Entry(UserInterfaceFSM& context)

{
    UserInterface& ctxt = context.getOwner();

    ctxt.uiLedPower(1);
    ctxt.uiLedStatus(1);
    ctxt.uiDisplay(888);
    ctxt.m_updateTimer.setTimeout(500);
}

void UIMap_UITest::Exit(UserInterfaceFSM& context)

{
    UserInterface& ctxt = context.getOwner();

    ctxt.uiLedPower(0);
    ctxt.uiLedStatus(0);
    ctxt.uiDisplay("   ");
}

void UIMap_UITest::updateTimerElapsed(UserInterfaceFSM& context)
{

    context.getState().Exit(context);
    context.setState(UIMap::AddressDisplay);
    context.getState().Entry(context);

}

void UIMap_AddressDisplay::Entry(UserInterfaceFSM& context)

{
    UserInterface& ctxt = context.getOwner();

    ctxt.uiDisplay(ctxt.m_dmxAddress);
    ctxt.m_updateTimer.setPeriod(50);
    ctxt.m_displaySleepTimer.setTimeout(20000);
}

void UIMap_AddressDisplay::Exit(UserInterfaceFSM& context)

{
    UserInterface& ctxt = context.getOwner();

    ctxt.m_updateTimer.Stop();
    ctxt.m_displaySleepTimer.Stop();
}

void UIMap_AddressDisplay::BtnModePressed(UserInterfaceFSM& context)
{

    context.getState().Exit(context);
    context.setState(UIMap::MenuMode);
    context.getState().Entry(context);

}

void UIMap_AddressDisplay::displaySleepTimerElapsed(UserInterfaceFSM& context)
{

    context.getState().Exit(context);
    context.setState(UIMap::DisplayOff);
    context.getState().Entry(context);

}

void UIMap_AddressDisplay::updateTimerElapsed(UserInterfaceFSM& context)
{
    UserInterface& ctxt = context.getOwner();

    UserInterfaceState& endState = context.getState();

    context.clearState();
    ctxt.uiDisplay(ctxt.m_dmxAddress);
    context.setState(endState);

}

void UIMap_DisplayOff::Entry(UserInterfaceFSM& context)

{
    UserInterface& ctxt = context.getOwner();

    ctxt.uiDisplay("");
}

void UIMap_DisplayOff::BtnModePressed(UserInterfaceFSM& context)
{

    context.getState().Exit(context);
    context.setState(UIMap::AddressDisplay);
    context.getState().Entry(context);

}

void UIMap_DisplayOff::BtnOkPressed(UserInterfaceFSM& context)
{

    context.getState().Exit(context);
    context.setState(UIMap::AddressDisplay);
    context.getState().Entry(context);

}

void UIMap_MenuMode::Entry(UserInterfaceFSM& context)

{
    UserInterface& ctxt = context.getOwner();

    ctxt.uiDisplay("mod");
}

void UIMap_MenuMode::BtnModePressed(UserInterfaceFSM& context)
{

    context.getState().Exit(context);
    context.setState(UIMap::MenuSpeed);
    context.getState().Entry(context);

}

void UIMap_MenuMode::BtnOkPressed(UserInterfaceFSM& context)
{

    context.getState().Exit(context);
    context.setState(UIMap::MenuModeDmx);
    context.getState().Entry(context);

}

void UIMap_MenuSpeed::Entry(UserInterfaceFSM& context)

{
    UserInterface& ctxt = context.getOwner();

    ctxt.uiDisplay("spd");
}

void UIMap_MenuSpeed::BtnModePressed(UserInterfaceFSM& context)
{

    context.getState().Exit(context);
    context.setState(UIMap::MenuDisplay);
    context.getState().Entry(context);

}

void UIMap_MenuSpeed::BtnOkPressed(UserInterfaceFSM& context)
{

    context.getState().Exit(context);
    context.setState(UIMap::MenuSpeedShow);
    context.getState().Entry(context);

}

void UIMap_MenuDisplay::Entry(UserInterfaceFSM& context)

{
    UserInterface& ctxt = context.getOwner();

    ctxt.uiDisplay("dsp");
}

void UIMap_MenuDisplay::BtnModePressed(UserInterfaceFSM& context)
{

    context.getState().Exit(context);
    context.setState(UIMap::MenuExit);
    context.getState().Entry(context);

}

void UIMap_MenuDisplay::BtnOkPressed(UserInterfaceFSM& context)
{

    context.getState().Exit(context);
    context.setState(UIMap::MenuDisplayShow);
    context.getState().Entry(context);

}

void UIMap_MenuExit::Entry(UserInterfaceFSM& context)

{
    UserInterface& ctxt = context.getOwner();

    ctxt.uiDisplay("ext");
}

void UIMap_MenuExit::BtnModePressed(UserInterfaceFSM& context)
{

    context.getState().Exit(context);
    context.setState(UIMap::MenuMode);
    context.getState().Entry(context);

}

void UIMap_MenuExit::BtnOkPressed(UserInterfaceFSM& context)
{

    context.getState().Exit(context);
    context.setState(UIMap::AddressDisplay);
    context.getState().Entry(context);

}

void UIMap_MenuModeDmx::Entry(UserInterfaceFSM& context)

{
    UserInterface& ctxt = context.getOwner();

    ctxt.uiDisplay("dmx");
}

void UIMap_MenuModeDmx::BtnModePressed(UserInterfaceFSM& context)
{

    context.getState().Exit(context);
    context.setState(UIMap::MenuModeRainBow);
    context.getState().Entry(context);

}

void UIMap_MenuModeDmx::BtnOkPressed(UserInterfaceFSM& context)
{
    UserInterface& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    ctxt.setMode(UserInterface::OperationDmx);
    context.setState(UIMap::AddressDisplay);
    context.getState().Entry(context);

}

void UIMap_MenuModeRainBow::Entry(UserInterfaceFSM& context)

{
    UserInterface& ctxt = context.getOwner();

    ctxt.uiDisplay("rai");
}

void UIMap_MenuModeRainBow::BtnModePressed(UserInterfaceFSM& context)
{

    context.getState().Exit(context);
    context.setState(UIMap::MenuModeTest);
    context.getState().Entry(context);

}

void UIMap_MenuModeRainBow::BtnOkPressed(UserInterfaceFSM& context)
{
    UserInterface& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    ctxt.setMode(UserInterface::OperationRainbow);
    context.setState(UIMap::AddressDisplay);
    context.getState().Entry(context);

}

void UIMap_MenuModeTest::Entry(UserInterfaceFSM& context)

{
    UserInterface& ctxt = context.getOwner();

    ctxt.uiDisplay("tst");
}

void UIMap_MenuModeTest::BtnModePressed(UserInterfaceFSM& context)
{

    context.getState().Exit(context);
    context.setState(UIMap::MenuModeDmx);
    context.getState().Entry(context);

}

void UIMap_MenuModeTest::BtnOkPressed(UserInterfaceFSM& context)
{
    UserInterface& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    ctxt.setMode(UserInterface::OperationTest);
    context.setState(UIMap::AddressDisplay);
    context.getState().Entry(context);

}

void UIMap_MenuSpeedShow::Entry(UserInterfaceFSM& context)

{
    UserInterface& ctxt = context.getOwner();

    ctxt.uiDisplay(ctxt.getSpeed());
}

void UIMap_MenuSpeedShow::BtnModePressed(UserInterfaceFSM& context)
{

    context.getState().Exit(context);
    context.setState(UIMap::MenuSpeedIncrease);
    context.getState().Entry(context);

}

void UIMap_MenuSpeedShow::BtnOkPressed(UserInterfaceFSM& context)
{

    context.getState().Exit(context);
    context.setState(UIMap::AddressDisplay);
    context.getState().Entry(context);

}

void UIMap_MenuSpeedIncrease::Entry(UserInterfaceFSM& context)

{
    UserInterface& ctxt = context.getOwner();

    ctxt.incSpeed();
}

void UIMap_MenuSpeedIncrease::Default(UserInterfaceFSM& context)
{

    context.getState().Exit(context);
    context.setState(UIMap::MenuSpeedShow);
    context.getState().Entry(context);

}

void UIMap_MenuDisplayShow::Entry(UserInterfaceFSM& context)

{
    UserInterface& ctxt = context.getOwner();

    ctxt.uiDisplay(ctxt.getDisplayBrightness());
}

void UIMap_MenuDisplayShow::BtnModePressed(UserInterfaceFSM& context)
{

    context.getState().Exit(context);
    context.setState(UIMap::MenuDisplayIncrease);
    context.getState().Entry(context);

}

void UIMap_MenuDisplayShow::BtnOkPressed(UserInterfaceFSM& context)
{

    context.getState().Exit(context);
    context.setState(UIMap::AddressDisplay);
    context.getState().Entry(context);

}

void UIMap_MenuDisplayIncrease::Entry(UserInterfaceFSM& context)

{
    UserInterface& ctxt = context.getOwner();

    ctxt.incDisplayBrightness();
}

void UIMap_MenuDisplayIncrease::Tick(UserInterfaceFSM& context)
{

    context.getState().Exit(context);
    context.setState(UIMap::MenuDisplayShow);
    context.getState().Entry(context);

}

//
// Local variables:
//  buffer-read-only: t
// End:
//
